import os
import numpy as np
from sentence_transformers import SentenceTransformer, util
from chromadb import Client
from chromadb.config import Settings

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
if not os.path.exists("./chroma_db"):
    os.makedirs("./chroma_db")

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•...")
model = SentenceTransformer("paraphrase-multilingual-MiniLM-L12-v2")
print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ChromaDB
try:
    chroma_client = Client(
        Settings(persist_directory="./chroma_db", is_persistent=True)
    )
    faq_collection = chroma_client.get_or_create_collection("faq_test")
    print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ChromaDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
except Exception as e:
    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ChromaDB: {e}")
    exit(1)


def add_faq(question, answer):
    try:
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        existing = faq_collection.get(ids=[question])
        if existing["ids"]:
            print(f"‚ö†Ô∏è  ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {question}")
            return False

        embedding = model.encode(question, convert_to_numpy=True)
        faq_collection.add(
            ids=[question],
            metadatas=[{"question": question, "answer": answer}],
            embeddings=[embedding.tolist()],
        )
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° FAQ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {question}")
        return True
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° FAQ: {e}")
        return False


def get_threshold_by_length(text, thresholds=None):
    if thresholds is None:
        thresholds = {
            (0, 5): 0.75,    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πâ‡∏ô‡πÜ
            (6, 15): 0.80,   # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            (16, 1000): 0.85, # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏¢‡∏≤‡∏ß
        }
    length = len(text.split())
    for (min_len, max_len), thr in thresholds.items():
        if min_len <= length <= max_len:
            return thr
    return 0.65


def find_similar_faq(user_question):
    try:
        # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        query_emb = model.encode(user_question, convert_to_numpy=True)
        print(f"üîç Query embedding shape: {query_emb.shape}")

        results = faq_collection.query(
            query_embeddings=[query_emb.tolist()],
            n_results=1,
            include=["embeddings", "metadatas"],
        )

        if results and results["ids"] and len(results["ids"][0]) > 0:
            matched_question = results["metadatas"][0][0]["question"]
            answer = results["metadatas"][0][0]["answer"]
            matched_emb = np.array(results["embeddings"][0][0], dtype=np.float32)

            print(f"üìã Matched embedding shape: {matched_emb.shape}")
            print(f"üéØ Query embedding shape: {query_emb.shape}")

            similarity = util.cos_sim(query_emb, matched_emb).item()

            thr_user = get_threshold_by_length(user_question)
            thr_db = get_threshold_by_length(matched_question)
            threshold = (thr_user + thr_db) / 2

            print(f"üìä Similarity: {similarity:.4f}, Threshold: {threshold:.4f}")
            print(f"üîç Matched question: {matched_question}")

            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ similarity ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if similarity < -1 or similarity > 1:
                print(f"‚ö†Ô∏è  Similarity ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: {similarity}")
                return None

            if similarity >= threshold:
                print("‚úÖ ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
                return answer
            else:
                print(
                    f"‚ùå Similarity ({similarity:.4f}) ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ threshold ({threshold:.4f})"
                )
                return None
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return None
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {e}")
        return None


if __name__ == "__main__":
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö FAQ")

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• FAQ
    print("\nüìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• FAQ...")
    faqs = [
        (
            "‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡∏î Join Back Rise",
            "‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡∏î Join Back Rise ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£\n1. ‡∏ï‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á\n2. ‡∏ß‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î\n3. ‡∏ï‡∏±‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏™‡πâ‡∏ô\n4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
        ),
        (
            "RAG ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£",
            "RAG ‡∏Ñ‡∏∑‡∏≠ Retrieval Augmented Generation ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏£‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠ AI ‡∏ï‡∏≠‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô",
        ),
        ("‡∏ß‡∏¥‡∏ò‡∏µ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏¢‡∏µ‡∏ô‡∏™‡πå", "‡∏Ñ‡∏ß‡∏£‡∏ã‡∏±‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡πá‡∏ô ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏Å‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏ú‡∏á‡∏ã‡∏±‡∏Å‡∏ü‡∏≠‡∏Å‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô"),
        (
            "How to care for jeans",
            "Wash with cold water, avoid direct sunlight, and use mild detergent",
        ),
        (
            "‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á",
            "‡∏ß‡∏±‡∏î‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß ‡∏£‡∏≠‡∏ö‡∏™‡∏∞‡πÇ‡∏û‡∏Å ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏ã‡∏™‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå",
        ),
    ]

    for question, answer in faqs:
        add_faq(question, answer)

    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
    print("\nüß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°...")
    test_questions = [
        "‡∏ï‡∏±‡∏î Join Back Rise",  # ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏£‡∏Å
        "RAG ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏≠‡∏∞‡πÑ‡∏£",  # ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
        "‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á",  # ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏£‡∏Å
        "How to care for jeans?",  # ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
        "‡∏ß‡∏¥‡∏ò‡∏µ‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏¢‡∏µ‡∏ô‡∏™‡πå",  # ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
        "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Join Back Rise ‡∏¢‡∏±‡∏á‡πÑ‡∏á",  # ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡πÅ‡∏ï‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ã‡∏™‡πå‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£",  # ‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
        "Python ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£",  # ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡∏Ñ‡∏ß‡∏£‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
    ]

    for i, q in enumerate(test_questions, 1):
        print(f"\n{'='*60}")
        print(f"ü§î ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà {i}: {q}")
        print("-" * 60)
        ans = find_similar_faq(q)
        if ans:
            print(f"üí¨ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {ans}")
        else:
            print("üîÑ ‚Üí Fallback ‡πÑ‡∏õ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô")
