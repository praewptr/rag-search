from chromadb import Client
from chromadb.config import Settings
from sentence_transformers import SentenceTransformer, util
from typing import Optional
from services.client import chroma_client
import numpy as np

model = SentenceTransformer("paraphrase-multilingual-MiniLM-L12-v2")

# Create or get the collection for FAQs
faq_collection = chroma_client.get_or_create_collection("faq")


def add_faq(question, answer):
    try:
        # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        existing = faq_collection.get(ids=[question])
        if existing["ids"]:
            print(f"‚ö†Ô∏è  ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: {question}")
            return False

        embedding = model.encode(question, convert_to_numpy=True)
        faq_collection.add(
            ids=[question],
            metadatas=[{"question": question, "answer": answer}],
            embeddings=[embedding.tolist()],
        )
        print(f"‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° FAQ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {question}")
        return True
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° FAQ: {e}")
        return False


def get_threshold_by_length(text, thresholds=None):
    if thresholds is None:
        thresholds = {
            (0, 5): 0.95,  # ‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πâ‡∏ô‡πÜ
            (6, 15): 0.90,  # ‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            (16, 1000): 0.85,  # ‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏¢‡∏≤‡∏ß
        }
    length = len(text.split())
    for (min_len, max_len), thr in thresholds.items():
        if min_len <= length <= max_len:
            return thr
    return 0.92


def find_similar_faq(user_question):
    try:
        # ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        query_emb = model.encode(user_question, convert_to_numpy=True)
        print(f"üîç Query embedding shape: {query_emb.shape}")

        results = faq_collection.query(
            query_embeddings=[query_emb.tolist()],
            n_results=1,
            include=["embeddings", "metadatas"],
        )

        if results and results["ids"] and len(results["ids"][0]) > 0:
            matched_question = results["metadatas"][0][0]["question"]
            answer = results["metadatas"][0][0]["answer"]
            matched_emb = np.array(results["embeddings"][0][0], dtype=np.float32)

            similarity = util.cos_sim(query_emb, matched_emb).item()

            thr_user = get_threshold_by_length(user_question)
            thr_db = get_threshold_by_length(matched_question)
            threshold = (thr_user + thr_db) / 2

            print(f"üìä Similarity: {similarity:.4f}, Threshold: {threshold:.4f}")
            print(f"üîç Matched question: {matched_question}")

            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ similarity ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if similarity < -1 or similarity > 1:
                print(f"‚ö†Ô∏è  Similarity ‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: {similarity}")
                return None

            if similarity >= threshold:
                print("‚úÖ ‡∏û‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
                return answer
            else:
                print(
                    f"‚ùå Similarity ({similarity:.4f}) ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ threshold ({threshold:.4f})"
                )
                return None
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return None
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {e}")
        return None
